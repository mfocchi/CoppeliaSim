<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>Buffers</title>
<link rel="stylesheet" type="text/css" href="../style.css">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>
Buffers
</h1>

<p>A Lua string does not differentiate between text and binary data, which is fine as long as we stay in Lua world. This however poses various problems when Lua generated data is read/received via a programming language that makes the distinction between those two types of data (e.g. Python). Assigning specific types by relying on  some heuristics (and/or function calltip inspection) works up to a certain degree, but does not cover all cases (e.g. is an empty string intended as empty text or empty binary data?).</p>
<p>For above reasons, buffers have been introduced in CoppeliaSim V4.7 in order to be able (if desired) to clearly identify buffers, i.e. binary data (versus Lua strings). This is done with the newly introduced <em>tobuffer</em> function:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">local buffer = tobuffer('Hello') -- represents binary data</code>

<p>Buffers are implemented via a specific metatable, and identify as <em>table</em>, with the <em>type</em> function. One should use <em>isbuffer</em> to make the distinction between buffer and non-buffer:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">isbuffer(tobuffer('Hello')) --> returns true
isbuffer('Hello') --> returns false
isbuffer('\0\0\0') --> returns false</code>

<p>The same operations on/with Lua strings are also supported with buffers (but most return a Lua string, not a buffer), e.g.:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">#tobuffer('Hello') --> returns 5
local buffer = tobuffer('Hello') .. tobuffer(' World!') --> buffer is buffer 'Hello World!'
buffer:gsub('World', 'Planet') --> returns string 'Hello Planet!'
string.gsub(buffer, 'World', 'Planet') --> returns string 'Hello Planet!'</code>

<p>Mixed operations are also supported, e.g.:</p>

<code class="hljs language-lua coppelia-coppeliasim-script">tobuffer('Hello') .. ' World!' --> returns buffer 'Hello World!'
'Hello' .. tobuffer(' World!') --> returns buffer 'Hello World!'</code>

<p>Beware that comparison between a string and a buffer always resolves to <strong>false</strong>. Also remember that buffers identify as table when evaluated with the type function. This can lead to <a href="compatibility.htm#buffers">potential compatibility issues</a>.</p>


 <br> 
 <br> 

  
  </td>
 </tr>
</table> 
</div>  
  
  
</body>

</html>
