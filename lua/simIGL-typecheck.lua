-- simIGL lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'
require 'functional'

return function(obj)
    obj['getMesh'] = wrap(obj['getMesh'], function(origFunc)
        return function(...)
            local h, options = checkargsEx(
                {level=1},
                {
                    {type = 'int'},
                    {type = 'table', default = {}},
                },
                ...
            )
            local _rets = {origFunc(h, options)}
            return table.unpack(_rets)
        end
    end)

    obj['meshBooleanShape'] = wrap(obj['meshBooleanShape'], function(origFunc)
        return function(...)
            local handles, op = checkargsEx(
                {level=1},
                {
                    {type = 'table', item_type = 'int'},
                    {type = 'int'},
                },
                ...
            )
            local _rets = {origFunc(handles, op)}
            return table.unpack(_rets)
        end
    end)

    obj['convexHullShape'] = wrap(obj['convexHullShape'], function(origFunc)
        return function(...)
            local handles = checkargsEx(
                {level=1},
                {
                    {type = 'table', item_type = 'int'},
                },
                ...
            )
            local _rets = {origFunc(handles)}
            return table.unpack(_rets)
        end
    end)

    obj['pointNormalToMatrix'] = wrap(obj['pointNormalToMatrix'], function(origFunc)
        return function(...)
            local point, normal = checkargsEx(
                {level=1},
                {
                    {type = 'table'},
                    {type = 'table'},
                },
                ...
            )
            local _rets = {origFunc(point, normal)}
            return table.unpack(_rets)
        end
    end)

    obj['rayTest'] = wrap(obj['rayTest'], function(origFunc)
        return function(...)
            local origin, points, proximitySensorHandle = checkargsEx(
                {level=1},
                {
                    {type = 'table'},
                    {type = 'table'},
                    {type = 'int', nullable = true, default = NIL},
                },
                ...
            )
            local _rets = {origFunc(origin, points, proximitySensorHandle)}
            return table.unpack(_rets)
        end
    end)

    obj['drawMesh'] = wrap(obj['drawMesh'], function(origFunc)
        return function(...)
            local mesh, opts = checkargsEx(
                {level=1},
                {
                    {type = 'table'},
                    {type = 'table'},
                },
                ...
            )
            local _rets = {origFunc(mesh, opts)}
            return table.unpack(_rets)
        end
    end)

end
